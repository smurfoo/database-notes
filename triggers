Drop Table if exists MovieCharacter
Drop Table if exists Agent
Go

Create Table Agent
(
	AgentID			int identity(1,1)	not null
										constraint PK_Agent primary key clustered,
	AgentName		varchar(70)			not null,
	AgentFee		money				not null
)

Create Table MovieCharacter
(
	CharacterID		int identity(1,1)	not null
										constraint PK_Character primary key clustered,
	CharacterName	varchar(70)			not null,
	CharacterMovie	varchar(70)			not null,
	CharacterRating	char(1)				null 
										constraint DF_characterRating default 3,
	Characterwage	smallmoney			null,
	AgentID			int null			constraint FK_MovieCharacterToAgent
											references Agent(AgentID)
)
Go

Insert Into Agent
	(AgentName, AgentFee)
Values
	('Bob the agent', 50)
Insert Into Agent
	(AgentName, AgentFee)
Values
	('Good Acting For U', 125)
Insert Into Agent
	(AgentName, AgentFee)
Values
	('I represent anyone', 5)

Insert Into MovieCharacter	
	(CharacterName, CharacterMovie, CharacterRating, CharacterWage, AgentID)
Values
	('ET', 'ET The Extraterrestrial', '4', 20000, 3)
Insert Into MovieCharacter
	(CharacterName, CharacterMovie, CharacterRating, CharacterWage, AgentID)
Values
	('Luke Skywalker', 'Star Wars', '5', 12000, 2)
Insert Into MovieCharacter
	(CharacterName, CharacterMovie, CharacterRating, CharacterWage, AgentID)
Values
	('R2D2', 'Star Wars', '4', 0, 1)
Insert Into MovieCharacter
	(CharacterName, CharacterMovie, CharacterRating, CharacterWage, AgentID)
Values
	('Winnie The Pooh', 'Heffalump', '1', 20000, 2)
Insert Into MovieCharacter
	(CharacterName, CharacterMovie, CharacterRating, CharacterWage, AgentID)
Values
	('Guy in red uniform', 'Star Trek II', '4', 20000, 1)
Go
--TRIGGERS
--A bunch of code that executes in response to a particular DML statement on a particular table
--For example - We can create a trigger that will execute automatically when we perform an insert on the student table
--Trigger Code is stored in the DB SP's and views
--We maintain triggers in the same manner as SP's and views(sp_helptext,alter trigger,drop trigger)
--Triggers are not called explicitly, and do not have parameters

--WHY?
--Complex validation that cannot be done with check constraints
--Logging, archiving, backups

--A trigger can have more than one DML statement that will cause it to execute

--SYNTAX
--Create Trigger NAME
--on TABLENAME
--for DML STATEMENT(S)
--as
--SQL CODE
--Return

--SIMPLE TRIGGER
Create Trigger TR_Agent_Update2
on Agent
For update
as
RaisError('Yay! I''m a trigger!',16,1)
Return

--Test the trigger
update agent
set AgentFee=100
where agentid =3

--Wont work for other DML statements on that table

insert into Agent(AgentName,AgentFee)
values ('Shane',500)
Delete agent where AgentName='Shane'

--INSERTED AND DELETED TABLES
--Are created for us by SQL for us to use in our triggers
--Both tables have the same structure(attributes) as the table the trigger is on(base table)
--But, they contain different data

--INSERTED - contains the affected/changed records as the look AFTER the DML statement has executesd (after image)
--DELETED - contains the affected/changed records as the look BEFORE the DML statement has execute (before image)

update Agent
Set AgentFee=10   --was 50
where agentid=1

--INSERTED							
--AGENTID						NAME					FEE
--1								Bob The Agent			10

--DELETED
--AGENTID						NAME					FEE
--1								Bob The Agent			50

--For an insert trigger, the INSERTED table contains the inserted record(s) , the deleted table is empty
--For a delete trigger, the INSERTED table is empty, the deleted table contains the deleted records
go
--Trigger to demonstrate what is inside the inserted and Deleted tables
alter Trigger TR_MovieCharacter_Update
on MovieCharacter
For update,delete,insert
as
Select * from inserted
Select * from deleted
Select * from MovieCharacter
Rollback transaction
Select * from inserted
Select * from deleted
Select * from MovieCharacter

--Triggers must work properly if 0,1 or many records are affected
select * from MovieCharacter
--Single Record
Update MovieCharacter
set characterrating = 5
where characterid =1
--After a rollback the inserted and deleted tables are empty

--Multiple Records
Update MovieCharacter
set CharacterRating=5 
where CharacterMovie like 's%'

--Zero records
Update MovieCharacter
set CharacterRating=5 
where CharacterID=50

Insert into MovieCharacter(CharacterName,CharacterMovie,CharacterRating,Characterwage,AgentID)
values ('Shane the great!','Shane crushes the SQL monster!',4,120,1)

Delete MovieCharacter
where CharacterRating=4

--Create a trigger that enforces a rule that a characterswage must be >=0
--Update,insert on MovieCharacter
go
Create Trigger  TR_MovieCharacter_Insert_Update
on MovieCharacter
for insert,update
as
if exists (Select * from inserted where characterwage<0)
	Begin
	Rollback Transaction
	RaisError('You cannot have a character wage <0',16,1)
	End
Return
update MovieCharacter
set Characterwage=-100
where CharacterID=100

select * from MovieCharacter
--why would I want to run the exists if no records where affected?
--We don't
update MovieCharacter
set Characterwage=-100
where CharacterID=1
go
Alter Trigger  TR_MovieCharacter_Insert_Update
on MovieCharacter
for insert,update
as
if @@rowcount>0
	Begin	
	if exists (Select * from inserted where characterwage<0)
		Begin
		Rollback Transaction
		RaisError('You cannot have a character wage <0',16,1)
		End
	End
Return
--As well, if we did not change the character wage, we do not want to check the validation.
go
Alter Trigger  TR_MovieCharacter_Insert_Update
on MovieCharacter
for insert,update
as
if @@rowcount>0 and update(characterWage)
	Begin		
	if exists (Select * from inserted where characterwage<0)
		Begin
		Rollback Transaction
		RaisError('You cannot have a character wage <0',16,1)
		End
	End
Return
--The update function returns true/false. It returns TRUE if the column is part of the DML statement that caused the trigger to execute
--Update() does not check to see if the value actually changed values
--Update() returns TRUE for an insert 
Update MovieCharacter
set
CharacterRating=4,
charactername='bob'
where CharacterID=1
go
--Create a trigger that ensures that an agents fee is between 0 and 500
Create Trigger TR_Agent_insert_update
on Agent
for insert,update
as
if @@ROWCOUNT>0 and update(agentfee)
	Begin
	if exists(select * from agent where agentfee <0 or agentfee >500)
		Begin
		RaisError('Invalid Agent Fee!',16,1)
		Rollback Transaction
		End
	End
Return
go
--Create a trigger that enforces a rule that an agents fee cannot be increased by more than double in one update
Create Trigger TR_Agent_Update
on Agent
for update
as
if @@rowcount>0 and update(agentfee)
	Begin
	if exists(Select * from inserted inner join deleted
				on inserted.AgentID=deleted.AgentID
				where inserted.agentfee > deleted.AgentFee*2)
		Begin
		RaisError('Too much increase!',16,1)
		Rollback Transaction
		End
	End
Return

Update agent
set agentfee = 200
where agentid = 1

select * from agent

select * from agent
select * from MovieCharacter
--Enforce a rule that a moviecharacter cannot be deleted if their agentsfee is <10
go
Create Trigger TR_MovieCharacter_Delete
on MovieCharacter
For delete
as
if @@rowcount>0 
	Begin
	if exists(Select * from agent inner join deleted 
				on agent.AgentID = deleted.AgentID
				where AgentFee<10)
		begin
		RaisError('Agentfee is too low to delete their movie character',16,1)
		Rollback Transaction
		End
	End
Return
select * from MovieCharacter
Delete MovieCharacter
where CharacterID=1
go
--Question 2 and 3 on Transaction Exercise for homework
--2.	The Education Board is concerned with rising course costs! Create a trigger to ensure that a course cost does not get increased by more than 20% at any one time.
Create Trigger TR_Course_Update
on course
for update
as
if @@rowcount>0 and update(coursecost)
	Begin
	if exists (Select * from inserted inner join deleted on inserted.CourseId =deleted.CourseID where inserted.CourseCost>deleted.CourseCost*1.2)
		Begin
		RaisError('Too much increase',16,1)
		Rollback transaction
		End
	End
Return

go
--3.	Too many students owe us money and keep registering for more courses! Create a trigger to ensure that a student cannot register for any more courses if they have a balance owing of more than $500.
Create Trigger TR_Registration_Insert
on Registration
for insert
as
if @@rowcount>0 
	Begin
	if exists (Select * from student inner join inserted on inserted.StudentID=student.StudentID where BalanceOwing>500)
		Begin
		RaisError('Owe too much money! No registration for you!',16,1)
		Rollback Transaction
		End
	End
Return
go
--Trigger to enforce a rule that an agent cannot have more than 2 related moviecharacter records
Create Trigger TR_MovieCharacter_Insert_update
on moviecharacter
for insert,update
as
if @@rowcount>0 and update(agentid)
	Begin
	if exists (Select * from MovieCharacter inner join inserted on MovieCharacter.AgentID=inserted.AgentID  group by moviecharacter.agentid having count(*)>2)
		Begin
		RaisError('too many child records',16,1)
		Rollback transaction
		End
	End
Return

select * from MovieCharacter
select * from MovieCharacter

	update MovieCharacter
set AgentID = 2 
where characterid = 1

--Exercise question 1

--1.	In order to be fair to all students, a student can only belong to a maximum of 3 clubs. Create a trigger to enforce this rule.

