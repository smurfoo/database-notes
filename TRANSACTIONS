Select * from Staff
Select * from Position
Select * from Student
Delete Position

--1. All the records will be deleted
--2. No records will be deleted
--3. Only positionID 7 will be deleted
--4. Monitor starts on fire

-- A single DML statement always fully succeeds or fully fails
--A single DML statememnt has a built in transaction around it
--What about transfer funds?
--When the task you want to complete (like transfer funds) contains more than one DML stament we need to wrap up the entire task (all the Dml statements together) in transaction code

--ONLY USE TRANSACTION CODE WHEN YOUR TASK INVOLVES MORE THAN ONE DML STATEMENT
--SYNTAX
--Begin transaction - starts a transaction. any changes to the data after this are reversable 
--Rollback transaction - Reverses the changes to the data between the rollback transaction and the begin transaction. It also ends the transaction.
--Commit Transaction - makes the changes to the data between the Begin transaction and the commit transaction permanent! It also ends the transaction.

--Delete the transaction records and commit
Begin Transaction
Select * from Registration
Delete Registration
Select * from Registration
Commit transaction
Select * from Registration
go
--Sp to transfer funds
Create Procedure TransferFunds(@CustomerID int = null, @toCustomerID int =null,@amount smallmoney = null))
as
if @fromCustomerID is null or @toCustomerID is null or @amount is null
	Begin
	RaisError('You must provide customerID''s and amount',16,1)
	End
else
	Begin
	if not exists (Select * from account where customerid= @fromCustomerID) or not exists (select * from account where CustomerID=@toCustomerID)
	Begin 
	RaisError('One of the customerID''s does not exist in the account table',16,1)
	End
	else 
		Begin
		--Begin transaction right before the first DML statement
		Begin Transaction
		Update account
		set AccountBalance -=@amount
		where customerID = @fromCustomerID
		if @@error<>0
			Begin
			RaisError('Subtracting funds failed',16,1)
			Rollback Transaction
			End
		else
			Begin
			Update account
		    set AccountBalance +=@amount
			where customerID = @fromCustomerID
			if @@error<>0
			RaisError('Adding funds failed',16,1)
			Rollback Transaction
			End

End
return
execute TransferFunds 1,2,200
go
--Begin transaction
--DML 1
--if @@error<>0
	  --RaisError
	  --Rollback transaction
--else 
	 --DML2
	 --if @@error<>0
		--RaiseError
		--Rollback Transaction
	--else
		--DML3
		--if @@error<>0
			--RaisError
			--Rollback Transaction

--ONLY USE TRANSACTION CODE WHERE THE TASK(SP) INVOLVES MORE THAN ONE DML STATEMENT
--ALL BEGIN TRANSACTIONS MUST END IN EITHER ROLLBACK OR CIMMIT
--ONCE ROLLBACK OR COMMITTED, THE TRANSACTION IS COMPLETE, THE TRANSACTION IS COMPLETE AND YOU CANNOT EXECUTE ANOTHER ROLLBACK OR COMMIT
